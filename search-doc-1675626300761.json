[{"title":"@rbxts/tgframework","type":0,"sectionRef":"#","url":"/api","content":"@rbxts/tgframework Index Classes ControllerFrameworkClientFrameworkServerService Enumerations SignalType Functions CreateNetSignalGetAllControllersGetControllerGetService Interfaces ClientServiceMarker","keywords":""},{"title":"Controller","type":0,"sectionRef":"#","url":"/api/class/Controller","content":"Controller Indexable [key: string]: any Index Constructors constructor Properties DependenciesMiddlewareNameTNetClient Methods InitializeStart Constructors constructor new Controller(controllerData: Controller): Controller Parameters controllerData: Controller Returns Controller Properties optionalDependencies Dependencies?: [string] optionalMiddleware Middleware?: Middleware Name Name: string optionalTNetClient TNetClient?: default Methods optionalInitialize Initialize(): void Returns void optionalStart Start(): void Returns void","keywords":""},{"title":"FrameworkClient","type":0,"sectionRef":"#","url":"/api/class/FrameworkClient","content":"FrameworkClient Index Constructors constructor Properties ControllersMiddlewareOnStartStarted Methods AddControllersStart Constructors constructor new FrameworkClient(): default Returns default Properties Controllers Controllers: Map&lt;string, Controller&gt; optionalMiddleware Middleware?: Middleware OnStart OnStart: default Started Started: boolean Methods AddControllers AddControllers(directory: Instance, deep?: boolean): void Parameters directory: Instance optionaldeep: boolean Returns void Start Start(Middleware?: Middleware): Promise&lt;undefined | true&gt; Parameters optionalMiddleware: Middleware Returns Promise&lt;undefined | true&gt;","keywords":""},{"title":"FrameworkServer","type":0,"sectionRef":"#","url":"/api/class/FrameworkServer","content":"FrameworkServer Index Constructors constructor Properties MiddlewareOnStartServicesStarted Methods AddServicesStart Constructors constructor new FrameworkServer(): default Returns default Properties optionalMiddleware Middleware?: Middleware OnStart OnStart: default Services Services: Map&lt;string, Service&gt; Started Started: boolean Methods AddServices AddServices(directory: Instance, deep?: boolean): void Parameters directory: Instance optionaldeep: boolean Returns void Start Start(Middleware?: Middleware): Promise&lt;undefined | true&gt; Parameters optionalMiddleware: Middleware Returns Promise&lt;undefined | true&gt;","keywords":""},{"title":"SignalType","type":0,"sectionRef":"#","url":"/api/enum/SignalType","content":"SignalType Index Enumeration Members EventFunction Enumeration Members Event Event: Event Function Function: Function","keywords":""},{"title":"Service","type":0,"sectionRef":"#","url":"/api/class/Service","content":"Service Indexable [key: string]: any Index Constructors constructor Properties ClientDependenciesMiddlewareNameTNetServer Methods InitializeStart Constructors constructor new Service(serviceData: Service): Service Parameters serviceData: Service Returns Service Properties optionalClient Client?: {} Type declaration [key string | number]: any optionalDependencies Dependencies?: [string] optionalMiddleware Middleware?: Middleware Name Name: string optionalTNetServer TNetServer?: default Methods optionalInitialize Initialize(): void Returns void optionalStart Start(): void Returns void","keywords":""},{"title":"CreateNetSignal","type":0,"sectionRef":"#","url":"/api/function/CreateNetSignal","content":"CreateNetSignal Callable CreateNetSignal(signalType: SignalType): string Parameters signalType: SignalType Returns string","keywords":""},{"title":"GetController","type":0,"sectionRef":"#","url":"/api/function/GetController","content":"GetController Callable GetController(controllerName: string): undefined | Controller Parameters controllerName: string Returns undefined | Controller","keywords":""},{"title":"GetAllControllers","type":0,"sectionRef":"#","url":"/api/function/GetAllControllers","content":"GetAllControllers Callable GetAllControllers(): Map&lt;string, Controller&gt; Returns all of the currently registered controllers. @deprecated Returns Map&lt;string, Controller&gt;","keywords":""},{"title":"GetService","type":0,"sectionRef":"#","url":"/api/function/GetService","content":"GetService Callable GetService(serviceName: string): Service | ClientServiceMarker Returns the requested service, if there is one. Parameters serviceName: string Returns Service | ClientServiceMarker","keywords":""},{"title":"ClientServiceMarker","type":0,"sectionRef":"#","url":"/api/interface/ClientServiceMarker","content":"ClientServiceMarker Indexable [key: string]: any","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/Introduction","content":"","keywords":""},{"title":"Welcome​","type":1,"pageTitle":"Introduction","url":"/docs/Introduction#welcome","content":"Hello and welcome to using TGFramework-ts, a networking framework designed for roblox-ts. "},{"title":"Why should I use TGFramework-ts?​","type":1,"pageTitle":"Introduction","url":"/docs/Introduction#why-should-i-use-tgframework-ts","content":"It's designed to be easily understandable for it's users.It works like Knit in it's Networking and Controller/Service creation.It's got Middleware management, making it easier to see what code is recieving what data. "},{"title":"Who made it?​","type":1,"pageTitle":"Introduction","url":"/docs/Introduction#who-made-it","content":"TGFramework was created by Jimmy C. (CodedJimmy), a programmer with 4 years of experience on the Roblox platform. "},{"title":"Cool Framework, how do I install it?​","type":1,"pageTitle":"Introduction","url":"/docs/Introduction#cool-framework-how-do-i-install-it","content":"To install TGFramework, follow our Installation Guide "},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/Installation","content":"","keywords":""},{"title":"Download from NPM​","type":1,"pageTitle":"Installation","url":"/docs/Installation#download-from-npm","content":"To get started using TGFramework-ts, first download the package off of NPM using the following command. npm install @rbxts/tgframework  "},{"title":"Initializing a Server​","type":1,"pageTitle":"Installation","url":"/docs/Installation#initializing-a-server","content":"To initialize a Server, simply import the module like so: import { FrameworkServer } from &quot;@rbxts/tgframework&quot;  And then create a new Instance of it like so: import { FrameworkServer } from &quot;@rbxts/tgframework&quot; const TGFramework = new FrameworkServer()  "},{"title":"Initializing a Client​","type":1,"pageTitle":"Installation","url":"/docs/Installation#initializing-a-client","content":"info Initializing a Client, works the same as initializing a server, but we included this for examples sake. To initialize a Client, simply import the module like so: import { FrameworkClient } from &quot;@rbxts/tgframework&quot;  And then create a new Instance of it like so: import { FrameworkClient } from &quot;@rbxts/tgframework&quot; const TGFramework = new FrameworkClient()  "},{"title":"Loading Services/Controllers​","type":1,"pageTitle":"Installation","url":"/docs/Installation#loading-servicescontrollers","content":"caution The .AddServices and .AddControllers methods, both have a deep option which can be specified with a boolean. Using the deep option will load all Descendants which are controllers/services in the specific directory. To load Services/Controllers, just simply call the .AddServices / .AddControllers Method. This can be done like so: import { FrameworkServer } from &quot;@rbxts/tgframework&quot; const TGFramework = new FrameworkServer() const Directory = script.Parent TGFramework.AddServices(Directory)  "},{"title":"Starting the Server/Client​","type":1,"pageTitle":"Installation","url":"/docs/Installation#starting-the-serverclient","content":"To start your Server/Client, simply run the .Start() method like so: import { FrameworkServer } from &quot;@rbxts/tgframework&quot; const TGFramework = new FrameworkServer() const Directory = script.Parent TGFramework.AddServices(Directory) TGFramework.Start()  "},{"title":"Service","type":0,"sectionRef":"#","url":"/docs/Samples/Service","content":"Service A sample service example using TGFramework-ts. Code: import { Service } from &quot;@rbxts/tgframework&quot; export default new class TestService extends Service { constructor(){ super({ Name: &quot;TestService&quot;, Client: { Hello: () =&gt; { return this.Hello() } } }) } Initialize(): void { // This runs on Initialization } Start(): void { // This runs on Start } Hello(): string { return &quot;Hello from TestService&quot; } } ","keywords":""}]